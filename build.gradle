buildscript {
	ext {
		springBootVersion = '2.0.2.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'

group = 'com.britez'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


ext {
	springCloudVersion = 'Finchley.BUILD-SNAPSHOT'
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.springframework.cloud:spring-cloud-starter-sleuth')
	runtime('org.springframework.boot:spring-boot-devtools')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}

if (!project.hasProperty("dockerImgName")) {
	ext.dockerImgName = "${bootJar.baseName}"
}
if (!project.hasProperty("dockerTag")) {
	ext.dockerTag = "latest"
}
if (!project.hasProperty("dockerRegistry")) {
	ext.dockerRegistry = "docker.dev.redbee.io"
}
if (!project.hasProperty("dockerPushToRegistry")) {
	ext.dockerPushToRegistry = false
}

task buildDocker(type: Docker, dependsOn: build) {
	baseImage = "frolvlad/alpine-oraclejdk8:slim"
	maintainer = "RFSC"
	hostUrl = "https://docker.dev.redbee.io"
	push = dockerPushToRegistry.toBoolean()
	dryRun = false
	tagVersion = "${dockerTag}"
	tag = "${dockerRegistry}/${dockerImgName}"
	addFile {
		from bootJar
		rename { "${dockerImgName}.jar" }
	}
	//addFile("./java-entrypoint.sh", "/java-entrypoint.sh")
	exposePort(8080)

	entryPoint([
			//"/java-entrypoint.sh",
			"/${dockerImgName}.jar"
	])
}

